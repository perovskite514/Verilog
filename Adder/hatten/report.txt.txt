05-211013 嶋村光太郎

　d = 8191 = 2^13 - 1とおく。dを2^13であると近似することでxに対してシフト演算を用いることが出来る。
以下、具体的な式変形を示す。
  xhを19ビット、rhを13ビットとしてx = {xh, rh}と書く。この時、

　x = xh * 2^13 + rh
    = xh * d + xh + rh

  と変形出来る。ここで、qを20ビットの数として、q = xh + rhとおく。
また、xh1を7ビット、rh1を13ビットとしてq = {xh1, rh1}と書く。この時、
　
　q = xh1 * 2^13 + rh1
    = xh1 * d + xh1 + rh1

  と変形出来る。ここで、q1を14ビット、xh2を1ビット、rh2を13ビットとして、
q1 = xh1 + rh1, q1 = {xh2, rh2}とおく。この時、q1が7ビット+13ビットの和であるから
q1をdで割った商は0か1であることに注意しておく。

　q1 = xh2 * 2^13 + rh2
    = xh2 * d + xh2 + rh2

　ここで、これまでの式変形をまとめると、

　x = xh * d + q
    = xh * d + xh1 * d + q1
    = xh * d + xh1 * d + xh2 * d + xh2 + rh2
    = (xh + xh1 + xh2) * d + xh2 + rh2

  xh2 + rh2の部分に着目する。ここでq1をdで割った商が0か1であるため、xh2=1の場合かrh2の全ビットが1の
場合のみq1の商が1となる。また、上式からrh2の全ビットが1の場合の全体の余りがxh2であり、それ以外の場合は
全体の余りがxh2 + rh2になることがわかる。

　以上より、商z = xh + xh1 + xh2 + ((&rh2) ? 1 : 0);
            余りy = (&rh2) ? xh2 : xh2 + rh2;

と書くことが出来る。これらの式変形を組み合わせ回路に落とし込んでmodule divider_8191を作成している。
　